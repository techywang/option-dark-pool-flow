# -*- coding: utf-8 -*-
"""option_flow_analyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nZ-XKqdjzNIUKchd3k4SHaFoY9EIQdaD

# Prep Stage
"""

#import linear algebra and data manipulation libraries
import numpy as np
import pandas as pd
from scipy import stats

#import standard visualization
import matplotlib.pyplot as plt
import seaborn as sns

#special packages
import datetime
import re

"""# Importing Data"""

# import data
df = pd.read_csv("FB-OptionsFlow.csv")
# view the data
df.head()

"""# Data Cleaning"""

# convert expiry date to standard format
def toDate(d):
  new_d = datetime.datetime.strptime(d, '%m/%d/%Y')
  new_d = datetime.date.strftime(new_d, "%m/%d/%Y")
  return new_d

# Categorize the option duration
def duration(d):
  d1 = toDate(d)
  d1_new = datetime.datetime.strptime(d1, "%m/%d/%Y")
  dc = datetime.date.today()
  d2 = datetime.date.strftime(dc, "%m/%d/%Y")
  d2_new = datetime.datetime.strptime(d2, "%m/%d/%Y")
  delta = abs((d2_new - d1_new).days) 
  if delta == 0:
    x = 'Roulette'
  elif delta <= 7:
    x = 'Weekly'
  elif delta > 7 and delta <= 21:
    x = 'Shorter'
  elif delta > 21 and delta <= 42:
    x = 'Medium'
  else:
    x = 'Longer'
  return x

# split the string and get the quantitity
def split_detail(s):
  q, price, ab = re.split("@|_", s)
  if ab == 'A' or ab == 'AA':
    flow = int(q)
  else: 
    flow = -int(q)
  value = float(price) * flow * 100
  return flow, price, value, ab

# data preparation code
def prep(data):
  expiry = []
  term = []
  flow = []
  price = []
  value = []
  ask_bid = []
  # assign new values
  for i in range(len(data)):
    expiry.append(toDate(data['EXP'][i]))
    term.append(duration(data['EXP'][i]))
    flow.append(split_detail(data['DETAILS'][i])[0])
    price.append(split_detail(data['DETAILS'][i])[1])
    value.append(split_detail(data['DETAILS'][i])[2])
    ask_bid.append(split_detail(data['DETAILS'][i])[3])
    if data['Color'][i] is np.nan:
      data['Color'][i] = 'White'
  # create new columns
  data['expiry']=expiry
  data['term']=term
  data['flow']=flow
  data['price']=price
  data['value']=value
  data['ask_bid']=ask_bid
  # drop all unnecessary columns
  data.drop(columns=['EXP','DETAILS','Unnamed: 11'], inplace = True)
  return data

df = prep(df)

df.head()

"""# Analysis

## Total Flow of Put Call
"""

# split into put and call
df_put = df[df['C/P'] == 'PUT']
df_call = df[df['C/P'] == 'CALL']

# total quantity flow for put
put_tot_flow = np.sum(abs(df_put['flow']))
# net flow of put volumn
put_net_flow = np.sum(df_put['flow'])
put_tot_flow, put_net_flow

# total quantity flow for call
call_tot_flow = np.sum(abs(df_call['flow']))
# net flow of call volumn
call_net_flow = np.sum(df_call['flow'])
call_tot_flow, call_net_flow

"""## Total Value Flow"""

# total transaction value for put
put_tot_val = np.sum(abs(df_put['value']))
# net transaction value from contracts
put_net_val = np.sum(df_put['value'])
put_tot_val, put_net_val

# total transaction value for call
call_tot_val = np.sum(abs(df_call['value']))
# net transaction value from contracts
call_net_val = np.sum(df_call['value'])
call_tot_val, call_net_val

"""## Cumulative Quantity Flow Viz"""

# creating a 2 x n array to keep track of the change in put and call
flow_array = np.zeros(shape=(len(df),3))
fpct_array = np.zeros(shape=(len(df),3))
# back simulating the put and call transaction throughout the trading day
cpf = 0
ccf = 0
for t in range(len(df)):
  # propogating forward from the last row of data
  time_step = len(df) - t - 1
  if df['C/P'][time_step] == 'PUT':
    cpf += df['flow'][time_step]
    # fill the value into the first (put) column 
    flow_array[t][0] = cpf
    flow_array[t][1] = ccf
  else:
    ccf += df['flow'][time_step]
    # fill the value into the second (call) column
    flow_array[t][1] = ccf
    flow_array[t][0] = cpf
  flow_array[t][2] = df['SPOT'][time_step]
# get the percentage change so to scale
for i in range(len(fpct_array)):
  for j in range(3):
    fpct_array[i][j]=(flow_array[i][j]-np.mean(flow_array[:,j]))/np.std(flow_array[:,j])
# convert it into pd dataframe
pcf = pd.DataFrame(flow_array, columns=['put_flow', 'call_flow', 'spot_price'])
pcf_norm = pd.DataFrame(fpct_array, columns=['put_flow_n', 'call_flow_n', 
                                             'spot_price_n'])

# Create the plot
time_step = np.arange(0, len(pcf), 1)
flow_data = pcf[['put_flow', 'call_flow']]
spot_data = pcf[['spot_price']]

fig, ax1 = plt.subplots()

ax1.set_xlabel('time step')
ax1.set_ylabel('option flow')
ax1.plot(time_step, flow_data)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:green'
ax2.set_ylabel('spot_price', color = color)  # we already handled the x-label with ax1
ax2.plot(time_step, spot_data, color = color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()

"""## Cumulative Value Flow"""

# creating a 2 x n array to keep track of the change in put and call value flow
value_array = np.zeros(shape=(len(df),3))
vapct_array = np.zeros(shape=(len(df),3))
# back simulating the put and call transaction throughout the trading day
cpv = 0
ccv = 0
for t in range(len(df)):
  # propogating forward from the last row of data
  time_step = len(df) - t - 1
  if df['C/P'][time_step] == 'PUT':
    cpv += df['value'][time_step]
    # fill the value into the first (put) column 
    value_array[t][0] = cpv
    value_array[t][1] = ccv
  else:
    ccv += df['value'][time_step]
    # fill the value into the second (call) column
    value_array[t][1] = ccv
    value_array[t][0] = cpv
  value_array[t][2] = df['SPOT'][time_step]
# get the percentage change so to scale
for i in range(len(vapct_array)):
  for j in range(3):
    vapct_array[i][j]=(value_array[i][j]-np.mean(value_array[:,j]))/np.std(value_array[:,j])
# convert it into pd dataframe
pcv = pd.DataFrame(value_array, columns=['put_val', 'call_val', 'spot_price'])
pcv_norm = pd.DataFrame(vapct_array, columns=['put_val_n', 'call_val_n', 
                                             'spot_price_n'])

# Create the plot
time_step = np.arange(0, len(pcf), 1)
value_data = pcv[['put_val', 'call_val']]
spot_data = pcv[['spot_price']]

fig, ax1 = plt.subplots()

ax1.set_xlabel('time step')
ax1.set_ylabel('value flow')
ax1.plot(time_step, value_data)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:green'
ax2.set_ylabel('spot_price', color = color)  # we already handled the x-label with ax1
ax2.plot(time_step, spot_data, color = color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()

"""## Short Term Outook"""

